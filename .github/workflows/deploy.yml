name: Deploy
on:
  push:
    branches:
      - main

    # Or trigger via tag creation instead
    #tags:
    #- '*'

jobs:
  tag:
    runs-on: ubuntu-latest
    outputs:
      value: ${{ steps.docker-image-tag.outputs.value }}
    steps:
      - uses: actions/checkout@v2

      - id: docker-image-tag
        run: echo "::set-output name=value::$( git rev-parse --short HEAD )"

        # Or extract the tag from the github reference
        # https://github.community/t/how-to-get-just-the-tag-name/16241/32
        #run: echo "TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

  build:
    runs-on: ubuntu-latest
    environment: development
    needs:
      - tag
    strategy:
      fail-fast: true
      matrix:
        app: [api, cms, web]
    steps:
      - uses: actions/checkout@v2

      - name: Cache layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache-${{ matrix.app }}
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Enable buildx
        run: docker buildx use algo-builder || docker buildx create --name algo-builder --use

      - name: Set tag
        # Artifact Registry Docker repo image names look like...
        # <repository-region>-docker.pkg.dev/<project-id>/<repository-name>/<image>:<tag>
        run: echo "image_name=${{ secrets.GCP_DOCKER_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_DOCKER_REPOSITORY }}/${{ matrix.app }}" >> $GITHUB_ENV

      - name: Build docker image
        # Note: Because of how `>` works in YML, lines have to all have the same indentation to be folded with spaces instead of newlines
        run: >
          docker buildx build
          -t ${{ env.image_name }}:${{ needs.tag.outputs.value }}
          -f ./docker/deploy/${{ matrix.app }}/Dockerfile
          --cache-from "type=local,src=/tmp/.buildx-cache-${{ matrix.app }}"
          --cache-to "type=local,dest=/tmp/.buildx-cache-${{ matrix.app }}-new"
          --load
          .

      - name: Move Docker cache
        run: |
          rm -rf /tmp/.buildx-cache-${{ matrix.app }}
          mv /tmp/.buildx-cache-${{ matrix.app }}-new /tmp/.buildx-cache-${{ matrix.app }}

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@master
        with:
          version: '290.0.1'
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Auth docker for gcloud
        run: gcloud auth configure-docker ${{ secrets.GCP_DOCKER_REGISTRY }}

      - name: Push image
        run: docker push ${{ env.image_name }} --all-tags

  terraform:
    runs-on: ubuntu-latest
    environment: development
    needs:
      - tag
      - build
    defaults:
      run:
        working-directory: terraform
    env:
      # For terraform gcs backend
      GOOGLE_CREDENTIALS: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Init backend
        run: >
          terraform init
          -backend-config="bucket=${{ secrets.TERRAFORM_BACKEND_BUCKET }}"
          -backend-config="prefix=${{ secrets.TERRAFORM_BACKEND_PREFIX }}"

      - name: Apply terraform
        env:
          # Manually setting the Cloud Run revision names based on Github commit hash
          # can help prevent situations where creating a revision in the UI (ie. by
          # updating an environment variable) leads to revisions with same name and
          # conflicting state
          TF_VAR_api_revision_name: algomart-api-terraform-${{ needs.tag.outputs.value }}
          TF_VAR_cms_revision_name: algomart-cms-terraform-${{ needs.tag.outputs.value }}
          TF_VAR_web_revision_name: algomart-web-terraform-${{ needs.tag.outputs.value }}

          # Required
          TF_VAR_project: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_credentials: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

          TF_VAR_algod_host: ${{ secrets.ALGOD_HOST }}
          TF_VAR_algod_key: ${{ secrets.ALGOD_KEY }}
          TF_VAR_algod_port: ${{ secrets.ALGOD_PORT }}

          TF_VAR_api_creator_passphrase: ${{ secrets.API_CREATOR_PASSPHRASE }}
          TF_VAR_api_database_user_name: ${{ secrets.API_DATABASE_USER_NAME }}
          TF_VAR_api_database_user_password: ${{ secrets.API_DATABASE_USER_PASSWORD }}
          TF_VAR_api_domain_mapping: ${{ secrets.API_DOMAIN_MAPPING }}
          TF_VAR_api_funding_mnemonic: ${{ secrets.API_FUNDING_MNEMONIC }}
          TF_VAR_api_image: '${{ secrets.GCP_DOCKER_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_DOCKER_REPOSITORY }}/api:${{ needs.tag.outputs.value }}'
          TF_VAR_api_key: ${{ secrets.API_KEY }}
          TF_VAR_api_secret: ${{ secrets.API_SECRET }}

          TF_VAR_circle_key: ${{ secrets.CIRCLE_KEY }}
          TF_VAR_circle_url: ${{ secrets.CIRCLE_URL }}

          TF_VAR_cms_admin_email: ${{ secrets.CMS_ADMIN_EMAIL }}
          TF_VAR_cms_admin_password: ${{ secrets.CMS_ADMIN_PASSWORD }}
          TF_VAR_cms_database_user_name: ${{ secrets.CMS_DATABASE_USER_NAME }}
          TF_VAR_cms_database_user_password: ${{ secrets.CMS_DATABASE_USER_PASSWORD }}
          TF_VAR_cms_domain_mapping: ${{ secrets.CMS_DOMAIN_MAPPING }}
          TF_VAR_cms_image: '${{ secrets.GCP_DOCKER_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_DOCKER_REPOSITORY }}/cms:${{ needs.tag.outputs.value }}'
          TF_VAR_cms_key: ${{ secrets.CMS_KEY }}
          TF_VAR_cms_secret: ${{ secrets.CMS_SECRET }}
          TF_VAR_cms_storage_bucket: ${{ secrets.CMS_STORAGE_BUCKET }}

          TF_VAR_sendgrid_key: ${{ secrets.SENDGRID_KEY }}
          TF_VAR_sendgrid_from_email: ${{ secrets.SENDGRID_FROM_EMAIL }}

          TF_VAR_web_domain_mapping: ${{ secrets.WEB_DOMAIN_MAPPING }}
          TF_VAR_web_firebase_service_account: ${{ secrets.WEB_FIREBASE_SERVICE_ACCOUNT }}
          TF_VAR_web_image: '${{ secrets.GCP_DOCKER_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_DOCKER_REPOSITORY }}/web:${{ needs.tag.outputs.value }}'
          TF_VAR_web_next_public_firebase_config: ${{ secrets.WEB_NEXT_PUBLIC_FIREBASE_CONFIG }}

          # Optional
          TF_VAR_region: ${{ secrets.REGION }}
          TF_VAR_database_server_tier: ${{ secrets.DATABASE_SERVER_TIER }}

          TF_VAR_api_service_name: ${{ secrets.API_SERVICE_NAME }}
          TF_VAR_cms_service_name: ${{ secrets.CMS_SERVICE_NAME }}
          TF_VAR_database_server_name: ${{ secrets.DATABASE_SERVER_NAME }}
          TF_VAR_private_ip_name: ${{ secrets.PRIVATE_IP_NAME }}
          TF_VAR_vpc_name: ${{ secrets.VPC_NAME }}
          TF_VAR_vpc_access_connector_name: ${{ secrets.VPC_ACCESS_CONNECTOR_NAME }}
          TF_VAR_web_service_name: ${{ secrets.WEB_SERVICE_NAME }}

          TF_VAR_api_database_name: ${{ secrets.API_DATABASE_NAME }}
          TF_VAR_api_database_schema: ${{ secrets.API_DATABASE_SCHEMA }}
          TF_VAR_api_node_env: ${{ secrets.API_NODE_ENV }}

          TF_VAR_cms_database_name: ${{ secrets.CMS_DATABASE_NAME }}
          TF_VAR_cms_node_env: ${{ secrets.CMS_NODE_ENV }}

          TF_VAR_web_node_env: ${{ secrets.WEB_NODE_ENV }}

        # It's necessary to `unset` any `TF_VAR_*` variables if they're empty; otherwise
        # Terraform will override default values with empty ones. This needs to be done
        # in the same step as `apply`, too, since it doesn't update `$GITHUB_ENV`.
        #
        # Use `input=false` to prevent a hanging job where terraform expects any
        # missing required variables to come from STDIN
        run: |
          unset $( printenv | grep "^TF_VAR_[a-zA-Z0-9_]*=$" | sed 's/.$//' )
          terraform apply -auto-approve -input=false
